package com.example.marcadechoferes.mainscreen.profile.viewmodel

import android.R.attr
import android.content.Context
import android.content.Intent
import android.graphics.BitmapFactory
import android.os.Bundle
import android.util.Base64
import androidx.core.content.ContextCompat
import androidx.lifecycle.LiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.marcadechoferes.Extra.TinyDB
import com.example.marcadechoferes.auth.createpassword.CreateNewPasswordScreen
import com.example.marcadechoferes.auth.repository.AuthRepository
import com.example.marcadechoferes.auth.signin.SignInActivity
import com.example.marcadechoferes.databinding.FragmentProfileBinding
import com.example.marcadechoferes.loadingScreen.LoadingScreen
import com.example.marcadechoferes.mainscreen.MainActivity
import com.example.marcadechoferes.network.ResponseException
import com.example.marcadechoferes.network.signinResponse.Profile
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import javax.inject.Inject
import android.graphics.Bitmap

import android.R.attr.bitmap
import java.io.ByteArrayOutputStream
import java.util.*
import kotlin.concurrent.schedule


@HiltViewModel
class ProfileViewModel @Inject constructor(val authRepository: AuthRepository) : ViewModel() {
    var activityContext: Context? = null
    lateinit var tinyDB: TinyDB
    lateinit var dataBinding: FragmentProfileBinding
    fun viewsForFragment(context: Context, binding: FragmentProfileBinding) {
        activityContext = context
        dataBinding = binding
        tinyDB = TinyDB(context)
        getProfile()
//        var image=tinyDB.getString("Avatar")
       var image=""


        Base64ToBitmap(image.toString())


        binding.apply {


            edit.setOnClickListener {

                var intent = Intent(context, CreateNewPasswordScreen::class.java)
                ContextCompat.startActivity(context, intent, Bundle.EMPTY)
                (context as MainActivity).finish()

            }


            Logout.setOnClickListener {
                logoutUser()
                var intent = Intent(context, LoadingScreen::class.java)
                ContextCompat.startActivity(context, intent, Bundle.EMPTY)
            }
        }


    }


    fun logoutUser() {

        viewModelScope.launch {

            withContext(Dispatchers.IO) {
                try {
                    val name = tinyDB.getString("User")
                    val response =
                        authRepository.logoutUser(name!!)

                    println("SuccessResponse $response")

                    if (response != null) {
                        authRepository.clearData()
                        tinyDB.clear()
                        var intent = Intent(activityContext, SignInActivity::class.java)
                        ContextCompat.startActivity(activityContext!!, intent, Bundle.EMPTY)
                        (activityContext as MainActivity).finish()
                    }

                } catch (e: ResponseException) {
                    println("logout Failed $e")
                }
            }
        }


    }


    fun getProfile() {

        viewModelScope.launch {
            withContext(Dispatchers.IO) {

                var profile = authRepository.getProfile()
                dataBinding.apply {
                    Name.text = profile.name
                    surName.text = profile.surname
                    TitleName.text = profile.name
                    FatherName.text = profile.surname
                    Email.text = tinyDB.getString("User")

                }
                println("user personal data $profile")
            }

        }
    }

    fun Base64ToBitmap(base64: String) {
        val imageBytes = Base64.decode(base64, 0)
        val image = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.size)
        dataBinding.profileImage.setImageBitmap(image)
        println("imageprinted")


    }

    fun bitmapToBase64(bitmapImage:Bitmap){
        val byteArrayOutputStream = ByteArrayOutputStream()
        bitmapImage.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream)
        val byteArray: ByteArray = byteArrayOutputStream.toByteArray()
        val encoded = Base64.encodeToString(byteArray, Base64.DEFAULT)
        println("encoded $encoded")
        Base64ToBitmap(encoded)

    }
}